service: mynt-budget-tracker

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    PLAIDCLIENTID: ${env:PLAIDCLIENTID}
    PLAIDSECRET: ${env:PLAIDSECRET}
    PLAIDENV: ${env:PLAIDENV, 'sandbox'}
    USER_TABLE: ${self:service}-users-${sls:stage}
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt UsersTable.Arn
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: 
            - !GetAtt CognitoUserPool.Arn

functions:
  postConfirmation:
    handler: src/handlers/postConfirmation.handler
    events:
      - cognitoUserPool:
          pool: !Ref CognitoUserPool
          trigger: PostConfirmation
          existing: false
    provider:
      iam:
        role:
          statements:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt UsersTable.Arn

  createLinkToken:
    handler: src/handlers/plaid.createLinkToken
    events:
      - http:
          path: /plaid/create-link-token
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  exchangePublicToken:
    handler: src/handlers/plaid.exchangePublicToken
    events:
      - http:
          path: /plaid/exchange-token
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  getTransactions:
    handler: src/handlers/plaid.getTransactions
    events:
      - http:
          path: /transactions
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  signUp:
    handler: src/handlers/auth.signUp
    events:
      - http:
          path: /auth/signup
          method: post
          cors: true

  confirmSignUp:
    handler: src/handlers/auth.confirmSignUp
    events:
      - http:
          path: /auth/confirm
          method: post
          cors: true

  signIn:
    handler: src/handlers/auth.signIn
    events:
      - http:
          path: /auth/signin
          method: post
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        SSESpecification:
          SSEEnabled: true

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        LambdaConfig:
          PostConfirmation: !GetAtt PostConfirmationLambdaFunction.Arn

    PostConfirmationInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn: 
        - CognitoUserPool
        - PostConfirmationLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref PostConfirmationLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - http://localhost:3000/callback
          - https://your-production-domain.com/callback
        LogoutURLs:
          - http://localhost:3000
          - https://your-production-domain.com
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        AllowedOAuthFlowsUserPoolClient: true
        
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: mynt-budget-tracker-${sls:stage}-auth
        UserPoolId: !Ref CognitoUserPool

    # UserPoolIdentityProvider:
    #   Type: AWS::Cognito::UserPoolIdentityProvider
    #   Properties:
    #     UserPoolId: !Ref UserPool
    #     ProviderName: Google
    #     ProviderType: Google
    #     ProviderDetails:
    #       client_id: ${env:GOOGLE_CLIENT_ID}
    #       client_secret: ${env:GOOGLE_CLIENT_SECRET}
    #       authorize_scopes: email profile openid
    #     AttributeMapping:
    #       email: email
    #       given_name: given_name
    #       family_name: family_name 

custom:
  dotenv:
    path: ./.env
    logging: true

outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
    Description: Cognito User Pool ID
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Description: Cognito User Pool Client ID
  Region:
    Value: ${self:provider.region}
    Description: AWS Region
