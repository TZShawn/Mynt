service: mynt-budget-tracker

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    PLAIDCLIENTID: ${env:PLAIDCLIENTID}
    PLAIDSECRET: ${env:PLAIDSECRET}
    PLAIDENV: ${env:PLAIDENV, 'sandbox'}
    USER_TABLE: ${self:service}-users-${opt:stage, 'dev'}
    GOALS_TABLE: ${self:service}-goals-${opt:stage, 'dev'}
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt UsersTable.Arn
            - 'arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.USER_TABLE}'
            - 'arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.USER_TABLE}/index/*'
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"  # Changed to allow access to Cognito operations
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt GoalsTable.Arn
            - 'arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.GOALS_TABLE}'
            - 'arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.GOALS_TABLE}/index/*'


functions:
  postConfirmation:
    handler: src/handlers/postConfirmation.handler
    events:
      - cognitoUserPool:
          pool: ${self:service}-user-pool-${opt:stage, 'dev'}
          trigger: PostConfirmation
          existing: true

  createLinkToken:
    handler: src/handlers/plaid.createLinkToken
    events:
      - http:
          path: /plaid/create-link-token
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  exchangePublicToken:
    handler: src/handlers/plaid.exchangePublicToken
    events:
      - http:
          path: /plaid/exchange-token
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  getTransactions:
    handler: src/handlers/plaid.getTransactions
    events:
      - http:
          path: /transactions
          method: get
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  signUp:
    handler: src/handlers/auth.signUp
    events:
      - http:
          path: /auth/signup
          method: post
          cors: true

  confirmSignUp:
    handler: src/handlers/auth.confirmSignUp
    events:
      - http:
          path: /auth/confirm
          method: post
          cors: true

  signIn:
    handler: src/handlers/auth.signIn
    events:
      - http:
          path: /auth/signin
          method: post
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        SSESpecification:
          SSEEnabled: true
    GoalsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-goals-${opt:stage, 'dev'}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: goalId
            AttributeType: S
        KeySchema:
          - AttributeName: goalId
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true


    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${opt:stage, 'dev'}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: ${self:service}-user-pool-client-${opt:stage, 'dev'}
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - http://localhost:3000/callback
        LogoutURLs:
          - http://localhost:3000
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        AllowedOAuthFlowsUserPoolClient: true

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: mynt-budget-tracker-${opt:stage, 'dev'}-auth
        UserPoolId: !Ref CognitoUserPool

custom:
  dotenv:
    path: ./.env
    logging: true

outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
    Description: Cognito User Pool ID
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Description: Cognito User Pool Client ID
  Region:
    Value: ${self:provider.region}
    Description: AWS Region
